  name : Deploy to ECS
  on : 
    push :
      branches : main
  jobs :
    build : 
      name: CI
      runs-on: ubuntu-latest
      steps:
      - name: Check out latest code
        uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ap-southeast-2
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ap-southeast-2
      - name: Build and Push Image to ECR
        env : 
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
          AWS_DEFAULT_REGION: 'ap-southeast-2'
          AWS_ECR_URI: ${{ secrets.AWS_ECR_URI }}
          AWS_ECR_REPOSITORY: backend-image
        run : |
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/t4o7l9s3
          docker build -t $AWS_ECR_REPOSITORY .
          docker tag backend-image:latest $AWS_ECR_URI:latest
          docker push $AWS_ECR_URI:latest

    deploy:
      name: CD
      runs-on: ubuntu-latest
      needs: build
      steps:
      - name: Check out latest code
        uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ap-southeast-2
      - name: Deploy to EC2
        env:
          PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          HOSTNAME: ${{secrets.SSH_HOST}}
          USER_NAME: ec2-user
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} '
          sudo docker images -q | xargs sudo docker rmi -f || true &&
          sudo docker pull ${{secrets.AWS_ECR_URI}}:latest &&
          sudo docker stop backend-container || true &&
          sudo docker rm backend-container || true &&
          sudo docker run -d --name backend-container -p ${{secrets.PORT}}:${{secrets.PORT}} \
          -e MONGO_URL=${{secrets.MONGO_URL}} \
          -e PORT=${{secrets.PORT}} \
          -e JWT_SECRET=${{secrets.JWT_SECRET}} \
          -e IP=${{secrets.IP}} \
          ${{secrets.AWS_ECR_URI}}:latest '
    cleanup:
      name: cleanup
      runs-on: ubuntu-latest
      steps:
      - name: Check out latest code
        uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ap-southeast-2
      - name: Remove older images from public ECR
        run: |
          aws ecr-public describe-images \
            --repository-name backend-image \
            --region us-east-1 \
            --query 'imageDetails[?!(contains(imageTags, `latest`))].imageDigest' \
            --output text | xargs -I {} aws ecr-public batch-delete-image \
            --repository-name backend-image \
            --region us-east-1 \
            --image-ids imageDigest={}
